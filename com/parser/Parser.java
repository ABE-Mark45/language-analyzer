/* Parser.java */
/* Generated By:JavaCC: Do not edit this line. Parser.java */
package com.parser;
public class Parser implements ParserConstants {
    public Context variables = new Context();
    public static void main(String[] args) throws Exception {
      Parser parser=new Parser(new StreamProvider(System.in));
      parser.Parse().execute(parser.variables); 
    }

  final public CodeBlock Parse() throws ParseException {CodeBlock block;
    block = Block();
    jj_consume_token(0);
return block;
}

  final public CodeBlock Block() throws ParseException {CodeBlock block = new CodeBlock();
    Statement c;
    c = Command();
block.add(c);
    label_1:
    while (true) {
      if (jj_2_1(2)) {
        ;
      } else {
        break label_1;
      }
      jj_consume_token(SEMICOLON);
      c = Command();
block.add(c);
    }
return block;
}

  final public Statement Command() throws ParseException {Token variableToken;
    ArithmeticExpression arithmeticExpression;
    BooleanExpression booleanExpression;
    CodeBlock branchA, branchB, action, block;
    Statement ret;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SKIPCOMMAND:{
      jj_consume_token(SKIPCOMMAND);
ret = new SkipStatement();
      break;
      }
    case VAR:{
      variableToken = jj_consume_token(VAR);
      jj_consume_token(EQUALS);
      arithmeticExpression = AExp();
ret = new AssignmentStatement(variableToken.image, arithmeticExpression);
        //variables.put(variableToken.image, AExpVal);

      break;
      }
    case IF:{
      jj_consume_token(IF);
      booleanExpression = BExp();
      jj_consume_token(THEN);
      branchA = Block();
      jj_consume_token(ELSE);
      branchB = Block();
ret = new IfElseStatement(booleanExpression, branchA, branchB);
      break;
      }
    case WHILE:{
      jj_consume_token(WHILE);
      booleanExpression = BExp();
      jj_consume_token(DO);
      action = Block();
ret = new DoWhileStatement(booleanExpression, action);
      break;
      }
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
return ret;
}

  final public ArithmeticExpression AExp() throws ParseException {Token t;
    ArithmeticExpression op1, op2;
    ArithmeticExpression ret;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NUM:{
      t = jj_consume_token(NUM);
ret = new NumberExpression(Integer.parseInt(t.image));
      break;
      }
    case VAR:{
      t = jj_consume_token(VAR);
ret = new VariableExpression(t.image);
      break;
      }
    case LEFTP:{
      jj_consume_token(LEFTP);
      op1 = AExp();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:{
        t = jj_consume_token(PLUS);
        break;
        }
      case MINUS:{
        t = jj_consume_token(MINUS);
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      op2 = AExp();
      jj_consume_token(RIGHTP);
ret = new BinaryArithmeticExpression(op1, t.image, op2);
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
return ret;
}

  final public BooleanExpression BExp() throws ParseException {ArithmeticExpression op1, op2;
    BooleanExpression boolOp1, boolOp2, ret;
System.out.println("Parsing boolean expression");
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TRUE:{
      jj_consume_token(TRUE);
ret = new ConstantBoolean(true);
      break;
      }
    case FALSE:{
      jj_consume_token(FALSE);
ret = new ConstantBoolean(false);
      break;
      }
    case NOT:{
      jj_consume_token(NOT);
      boolOp1 = BExp();
ret = new NotExpression(boolOp1);
      break;
      }
    case LEFTP:{
      jj_consume_token(LEFTP);
      if (jj_2_2(2147483647)) {
        op1 = AExp();
        jj_consume_token(ISEQUAL);
        op2 = AExp();
ret = new IsEqualExpression(op1, op2);
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case TRUE:
        case FALSE:
        case NOT:
        case LEFTP:{
          boolOp1 = BExp();
          jj_consume_token(AND);
          boolOp2 = BExp();
ret = new ANDExpression(boolOp1, boolOp2);
          break;
          }
        default:
          jj_la1[3] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(RIGHTP);
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
return ret;
}

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_3_2()
 {
    if (jj_3R_AExp_143_5_3()) return true;
    if (jj_scan_token(ISEQUAL)) return true;
    return false;
  }

  private boolean jj_3R_AExp_153_5_10()
 {
    if (jj_scan_token(LEFTP)) return true;
    if (jj_3R_AExp_143_5_3()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(11)) {
    jj_scanpos = xsp;
    if (jj_scan_token(12)) return true;
    }
    if (jj_3R_AExp_143_5_3()) return true;
    if (jj_scan_token(RIGHTP)) return true;
    return false;
  }

  private boolean jj_3R_Command_105_5_5()
 {
    if (jj_scan_token(VAR)) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_3R_Command_100_5_2()) return true;
    return false;
  }

  private boolean jj_3R_AExp_149_5_9()
 {
    if (jj_scan_token(VAR)) return true;
    return false;
  }

  private boolean jj_3R_Command_101_5_4()
 {
    if (jj_scan_token(SKIPCOMMAND)) return true;
    return false;
  }

  private boolean jj_3R_Command_124_5_7()
 {
    if (jj_scan_token(WHILE)) return true;
    return false;
  }

  private boolean jj_3R_Command_100_5_2()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Command_101_5_4()) {
    jj_scanpos = xsp;
    if (jj_3R_Command_105_5_5()) {
    jj_scanpos = xsp;
    if (jj_3R_Command_115_5_6()) {
    jj_scanpos = xsp;
    if (jj_3R_Command_124_5_7()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_AExp_144_5_8()
 {
    if (jj_scan_token(NUM)) return true;
    return false;
  }

  private boolean jj_3R_AExp_143_5_3()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_AExp_144_5_8()) {
    jj_scanpos = xsp;
    if (jj_3R_AExp_149_5_9()) {
    jj_scanpos = xsp;
    if (jj_3R_AExp_153_5_10()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_Command_115_5_6()
 {
    if (jj_scan_token(IF)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[5];
  static private int[] jj_la1_0;
  static {
	   jj_la1_init_0();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x508100,0x1800,0x10500,0x12060,0x12060,};
	}
  final private JJCalls[] jj_2_rtns = new JJCalls[2];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor. */
  public Parser(Provider stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new ParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 5; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Parser(String dsl) throws ParseException, TokenMgrException {
	   this(new StringProvider(dsl));
  }

  public void ReInit(String s) {
	  ReInit(new StringProvider(s));
  }
  /** Reinitialise. */
  public void ReInit(Provider stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new ParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 5; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 5; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 5; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.RuntimeException {
    @Override
    public Throwable fillInStackTrace() {
      return this;
    }
  }
  static private final LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[26];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 5; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 26; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage, token_source == null ? null : ParserTokenManager.lexStateNames[token_source.curLexState]);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 2; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			   case 1: jj_3_2(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

}
